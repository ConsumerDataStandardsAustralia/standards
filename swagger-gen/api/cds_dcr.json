{
  "openapi": "3.0.3",
  "info": {
    "title": "CDR Dynamic Client Registration API",
    "description": "This specification defines the APIs for Data Holders exposing Dynamic Client Registration endpoints.",
    "version": "1.23.0"
  },
  "servers": [
    {
      "url": "https://data.holder.com.au/"
    }
  ],
  "paths": {
    "/register": {
      "post": {
        "tags": [
          "Client Registration"
        ],
        "summary": "Register Data Recipient oAuth Client",
        "description": "Register a client using a CDR Register issued Software Statement Assertion.",
        "operationId": "PostDataRecipientRegistration",
        "requestBody": {
          "description": "The registration request JWT to be used to register with a Data Holder.",
          "content": {
            "application/jwt": {
              "schema": {
                "$ref": "#/components/schemas/ClientRegistrationRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Client registration success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RegistrationProperties"
                }
              }
            }
          },
          "400": {
            "description": "Request failed due to client error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RegistrationError"
                }
              }
            }
          }
        },
        "x-codegen-request-body-name": "ClientRegistrationRequest"
      }
    },
    "/register/{ClientId}": {
      "get": {
        "tags": [
          "Client Registration"
        ],
        "summary": "Get oAuth Client Registration",
        "description": "Get a Client Registration for a given Client ID.",
        "operationId": "GetClientRegistration",
        "parameters": [
          {
            "name": "ClientId",
            "in": "path",
            "description": "The client ID issued by the target Data Holder",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "Authorization",
            "in": "header",
            "description": "An Authorisation Token as per **[[RFC6750]](#nref-RFC6750)**",
            "required": true,
            "schema": {
              "type": "string",
              "x-cds-type": "ExternalRef"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Client registration retrieval success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RegistrationProperties"
                }
              }
            }
          },
          "401": {
            "description": "Request failed due to unknown or invalid Client or invalid access token",
            "headers": {
              "WWW-Authenticate": {
                "description": "The Response Header Field as per **[[RFC6750]](#nref-RFC6750)**",
                "schema": {
                  "type": "string",
                  "x-cds-type": "ExternalRef"
                }
              }
            }
          },
          "403": {
            "description": "The client does not have permission to read, update or delete the Client"
          }
        },
        "x-scopes": [
          "cdr:registration"
        ]
      },
      "put": {
        "tags": [
          "Client Registration"
        ],
        "summary": "Update Data Recipient Registration",
        "description": "Update a Client Registration for a given Client ID.",
        "operationId": "PutDataRecipientRegistration",
        "parameters": [
          {
            "name": "ClientId",
            "in": "path",
            "description": "The client ID issued by the target Data Holder",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "Authorization",
            "in": "header",
            "description": "An Authorisation Token as per **[[RFC6750]](#nref-RFC6750)**",
            "required": true,
            "schema": {
              "type": "string",
              "x-cds-type": "ExternalRef"
            }
          }
        ],
        "requestBody": {
          "description": "The registration request JWT to be used to register with a Data Holder.",
          "content": {
            "application/jwt": {
              "schema": {
                "$ref": "#/components/schemas/ClientRegistrationRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Client registration update success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RegistrationProperties"
                }
              }
            }
          },
          "400": {
            "description": "Request failed due to client error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RegistrationError"
                }
              }
            }
          },
          "401": {
            "description": "Request failed due to unknown or invalid Client or invalid access token",
            "headers": {
              "WWW-Authenticate": {
                "description": "The Response Header Field as per **[[RFC6750]](#nref-RFC6750)**",
                "schema": {
                  "type": "string",
                  "x-cds-type": "ExternalRef"
                }
              }
            }
          },
          "403": {
            "description": "The client does not have permission to read, update or delete the Client"
          }
        },
        "x-scopes": [
          "cdr:registration"
        ],
        "x-codegen-request-body-name": "ClientRegistrationRequest"
      },
      "delete": {
        "tags": [
          "Client Registration"
        ],
        "summary": "Delete Data Recipient oAuth Client Registration",
        "description": "Delete a Client Registration for a given Client ID.",
        "operationId": "DeleteDataRecipientRegistration",
        "parameters": [
          {
            "name": "ClientId",
            "in": "path",
            "description": "The client ID issued by the target Data Holder",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "Authorization",
            "in": "header",
            "description": "An Authorisation Token as per **[[RFC6750]](#nref-RFC6750)**",
            "required": true,
            "schema": {
              "type": "string",
              "x-cds-type": "ExternalRef"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Client deleted"
          },
          "401": {
            "description": "Request failed due to unknown or invalid Client or invalid access token",
            "headers": {
              "WWW-Authenticate": {
                "description": "The Response Header Field as per **[[RFC6750]](#nref-RFC6750)**",
                "schema": {
                  "type": "string",
                  "x-cds-type": "ExternalRef"
                }
              }
            }
          },
          "403": {
            "description": "The client does not have permission to read, update or delete the Client"
          },
          "405": {
            "description": "Method Not Allowed. The requested method is unsupported"
          }
        },
        "x-scopes": [
          "cdr:registration"
        ]
      }
    }
  },
  "components": {
    "schemas": {
      "ClientRegistrationRequest": {
        "type": "string",
        "description": "The registration request JWT to be used to register with a Data Holder.",
        "format": "JWT",
        "example": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9..."
      },
      "RegistrationProperties": {
        "required": [
          "client_description",
          "client_id",
          "client_name",
          "client_uri",
          "grant_types",
          "id_token_signed_response_alg",
          "jwks_uri",
          "logo_uri",
          "org_id",
          "org_name",
          "redirect_uris",
          "request_object_signing_alg",
          "response_types",
          "scope",
          "software_id",
          "software_statement",
          "token_endpoint_auth_method",
          "token_endpoint_auth_signing_alg"
        ],
        "x-conditional": [
          "id_token_encrypted_response_alg",
          "id_token_encrypted_response_enc"
        ],
        "type": "object",
        "properties": {
          "client_id": {
            "type": "string",
            "description": "Data Holder issued client identifier string",
            "example": "35a5a70b-5b8d-41f4-9cbd-96cfbc15c58a"
          },
          "client_id_issued_at": {
            "type": "integer",
            "description": "Time at which the client identifier was issued expressed as seconds since 1970-01-01T00:00:00Z as measured in UTC",
            "example": 1571808167,
            "x-cds-type": "ExternalRef"
          },
          "client_name": {
            "type": "string",
            "description": "Human-readable string name of the software product to be presented to the end-user during authorization",
            "example": "Mock Software"
          },
          "client_description": {
            "type": "string",
            "description": "Human-readable string name of the software product description to be presented to the end user during authorization",
            "example": "A mock software product"
          },
          "client_uri": {
            "type": "string",
            "description": "URL string of a web page providing information about the client",
            "example": "https://www.mockcompany.com.au",
            "x-cds-type": "URIString"
          },
          "legal_entity_id": {
            "type": "string",
            "description": "A unique identifier string assigned by the CDR Register that identifies the Accredited Data Recipient Legal Entity",
            "example": "344F0E809-BDBE-4F8E-BD30-5E6C3CB78D7B"
          },
          "legal_entity_name": {
            "type": "string",
            "description": "Human-readable string name of the Accredited Data Recipient Legal Entity",
            "example": "Mock Company Pty Ltd."
          },
          "org_id": {
            "type": "string",
            "description": "A unique identifier string assigned by the CDR Register that identifies the Accredited Data Recipient Brand",
            "example": "3B0B0A7B-3E7B-4A2C-9497-E357A71D07C8"
          },
          "org_name": {
            "type": "string",
            "description": "Human-readable string name of the Accredited Data Recipient to be presented to the end user during authorization",
            "example": "Mock Company Brand."
          },
          "redirect_uris": {
            "type": "array",
            "description": "Array of redirection URI strings for use in redirect-based flows. If used, redirect_uris MUST match or be a subset of the redirect_uris as defined in the SSA",
            "example": [
              "https://www.mockcompany.com.au/redirects/redirect1",
              "https://www.mockcompany.com.au/redirects/redirect2"
            ],
            "items": {
              "type": "string",
              "x-cds-type": "URIString"
            }
          },
          "sector_identifier_uri": {
            "type": "string",
            "description": "URL string referencing the client sector identifier URI, used as an optional input to the Pairwise Identifier",
            "example": "https://www.mockcompany.com.au/sector_identifier.json",
            "x-cds-type": "URIString"
          },
          "logo_uri": {
            "type": "string",
            "description": "URL string that references a logo for the client. If present, the server SHOULD display this image to the end-user during approval",
            "example": "https://www.mockcompany.com.au/logos/logo1.png",
            "x-cds-type": "URIString"
          },
          "tos_uri": {
            "type": "string",
            "description": "URL string that points to a human-readable terms of service document for the Software Product",
            "example": "https://www.mockcompany.com.au/tos.html",
            "x-cds-type": "URIString"
          },
          "policy_uri": {
            "type": "string",
            "description": "URL string that points to a human-readable policy document for the Software Product",
            "example": "https://www.mockcompany.com.au/policy.html",
            "x-cds-type": "URIString"
          },
          "jwks_uri": {
            "type": "string",
            "description": "URL string referencing the client JSON Web Key (JWK) Set **[[RFC7517]](#nref-RFC7517)** document, which contains the client public keys",
            "example": "https://www.mockcompany.com.au/jwks",
            "x-cds-type": "URIString"
          },
          "revocation_uri": {
            "type": "string",
            "description": "URI string that references the location of the Software Product consent revocation endpoint",
            "example": "https://www.mockcompany.com.au/revocation",
            "x-cds-type": "URIString"
          },
          "recipient_base_uri": {
            "type": "string",
            "description": "Base URI for the Consumer Data Standard Data Recipient endpoints. This should be the base to provide reference to all other Data Recipient Endpoints",
            "example": "https://www.mockcompany.com.au",
            "x-cds-type": "URIString"
          },
          "token_endpoint_auth_method": {
            "type": "string",
            "x-cds-type": "Enum",
            "description": "The requested authentication method for the token endpoint",
            "enum": [
              "private_key_jwt"
            ]
          },
          "token_endpoint_auth_signing_alg": {
            "type": "string",
            "x-cds-type": "Enum",
            "description": "The algorithm used for signing the JWT",
            "enum": [
              "PS256",
              "ES256"
            ]
          },
          "grant_types": {
            "type": "array",
            "description": "Array of OAuth 2.0 grant type strings that the client can use at the token endpoint",
            "items": {
              "type": "string",
              "x-cds-type": "Enum",
              "enum": [
                "client_credentials",
                "authorization_code",
                "refresh_token"
              ]
            }
          },
          "response_types": {
            "type": "array",
            "description": "Array of the OAuth 2.0 response type strings that the client can use at the authorization endpoint.<br><br>Response type value `code` is required for Authorization Code Flow. Response type value `code id_token` is required for OIDC Hybrid Flow.",
            "items": {
              "type": "string",
              "x-cds-type": "Enum",
              "enum": [
                "code",
                "code id_token"
              ]
            }
          },
          "application_type": {
            "type": "string",
            "x-cds-type": "Enum",
            "description": "Kind of the application. The only supported application type will be `web`",
            "enum": [
              "web"
            ]
          },
          "id_token_signed_response_alg": {
            "type": "string",
            "x-cds-type": "Enum",
            "description": "Algorithm with which an id_token is to be signed",
            "enum": [
              "PS256",
              "ES256"
            ]
          },
          "id_token_encrypted_response_alg": {
            "type": "string",
            "description": "JWE `alg` algorithm with which an id_token is to be encrypted.<br/><br/>Required if OIDC Hybrid Flow (response type `code id_token`) is registered.",
            "example": "RSA-OAEP",
            "x-cds-type": "ExternalRef"
          },
          "id_token_encrypted_response_enc": {
            "type": "string",
            "description": "JWE `enc` algorithm with which an id_token is to be encrypted.<br/><br/>Required if OIDC Hybrid Flow (response type `code id_token`) is registered.",
            "example": "A256GCM",
            "x-cds-type": "ExternalRef"
          },
          "authorization_signed_response_alg": {
            "type": "string",
            "x-conditional": true,
            "description": "The JWS `alg` algorithm required for signing authorization responses. If this is specified, the response will be signed using JWS and the configured algorithm. The algorithm “none” is not allowed.<br><br>Required if response_type of “code” is registered by the client.",
            "example": "PS256",
            "enum": [
              "PS256",
              "ES256"
            ]
          },
          "authorization_encrypted_response_alg": {
            "type": "string",
            "x-conditional": true,
            "description": "The JWE `alg` algorithm required for encrypting authorization responses. If unspecified, the default is that no encryption is performed.<br><br>Required if “authorization_encrypted_response_enc” is included.",
            "example": "RSA-OAEP",
            "enum": [
              "RSA-OAEP",
              "RSA-OAEP-256"
            ]
          },
          "authorization_encrypted_response_enc": {
            "type": "string",
            "description": "The JWE `enc` algorithm required for encrypting authorization responses. If “authorization_encrypted_response_alg” is specified, the default for this value is “A128CBC-HS256”.",
            "example": "A128CBC-HS256",
            "enum": [
              "A256GCM",
              "A128CBC-HS256"
            ]
          },
          "request_object_signing_alg": {
            "type": "string",
            "x-cds-type": "Enum",
            "description": "Algorithm which the ADR expects to sign the request object if a request object will be part of the authorization request sent to the Data Holder",
            "enum": [
              "PS256",
              "ES256"
            ]
          },
          "software_statement": {
            "type": "string",
            "description": "The Software Statement Assertion, as defined in CDR standards",
            "format": "JWT"
          },
          "software_id": {
            "type": "string",
            "description": "String representing a unique identifier assigned by the Register and used by registration endpoints to identify the software product to be dynamically registered. </br></br>The \"software_id\" will remain the same for the lifetime of the product, across multiple updates and versions",
            "example": "740C368F-ECF9-4D29-A2EA-0514A66B0CDE"
          },
          "software_roles": {
            "type": "string",
            "x-cds-type": "Enum",
            "description": "String containing a role of the software in the CDR Regime. Initially the only value used with be `data-recipient-software-product`",
            "example": "data-recipient-software-product",
            "enum": [
              "data-recipient-software-product"
            ]
          },
          "scope": {
            "type": "string",
            "description": "String containing a space-separated list of scope values that the client can use when requesting access tokens.",
            "example": "openid profile bank:accounts.basic:read bank:accounts.detail:read bank:transactions:read bank:payees:read bank:regular_payments:read common:customer.basic:read common:customer.detail:read cdr:registration"
          }
        }
      },
      "ClientRegistration": {
        "allOf": [
          {
            "required": [
              "aud",
              "exp",
              "iat",
              "iss",
              "jti"
            ],
            "type": "object",
            "properties": {
              "iss": {
                "type": "string",
                "description": "Contains the identifier for the ADR Software Product (SoftwareProductId) as defined in the CDR Register",
                "example": "CDR Software Product ID"
              },
              "iat": {
                "type": "integer",
                "description": "The time at which the request was issued by the Data Recipient  expressed as seconds since 1970-01-01T00:00:00Z as measured in UTC",
                "example": 1571808167,
                "x-cds-type": "ExternalRef"
              },
              "exp": {
                "type": "integer",
                "description": "The time at which the request expires expressed as seconds since 1970-01-01T00:00:00Z as measured in UTC",
                "example": 2147483646,
                "x-cds-type": "ExternalRef"
              },
              "jti": {
                "type": "string",
                "description": "Unique identifier for the JWT, used to prevent replay of the token",
                "example": "37747cd1c10545699f754adf28b73e31"
              },
              "aud": {
                "type": "string",
                "description": "'Contains the Data Holder issuer value as described in the OIDC Discovery Document",
                "example": "https://secure.api.dataholder.com/issuer",
                "x-cds-type": "URIString"
              }
            }
          },
          {
            "$ref": "#/components/schemas/RegistrationProperties"
          }
        ]
      },
      "RegistrationError": {
        "required": [
          "error"
        ],
        "type": "object",
        "properties": {
          "error": {
            "type": "string",
            "x-cds-type": "Enum",
            "description": "Predefined error code as described in [section 3.3 OIDC Dynamic Client Registration](https://openid.net/specs/openid-connect-registration-1_0.html)",
            "enum": [
              "invalid_redirect_uri",
              "invalid_client_metadata",
              "invalid_software_statement",
              "unapproved_software_statement"
            ]
          },
          "error_description": {
            "type": "string",
            "description": "Additional text description of the error for debugging.",
            "x-cds-type": "ASCIIString"
          }
        }
      }
    },
    "responses": {
      "400Error": {
        "description": "Request failed due to client error",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/RegistrationError"
            }
          }
        }
      },
      "401Error": {
        "description": "Request failed due to unknown or invalid Client or invalid access token",
        "headers": {
          "WWW-Authenticate": {
            "description": "The Response Header Field as per **[[RFC6750]](#nref-RFC6750)**",
            "schema": {
              "type": "string",
              "x-cds-type": "ExternalRef"
            }
          }
        }
      },
      "403Error": {
        "description": "The client does not have permission to read, update or delete the Client"
      },
      "405Error": {
        "description": "Method Not Allowed. The requested method is unsupported"
      }
    },
    "parameters": {
      "Authorization": {
        "name": "Authorization",
        "in": "header",
        "description": "An Authorisation Token as per **[[RFC6750]](#nref-RFC6750)**",
        "required": true,
        "schema": {
          "type": "string",
          "x-cds-type": "ExternalRef"
        }
      },
      "ClientId": {
        "name": "ClientId",
        "in": "path",
        "description": "The client ID issued by the target Data Holder",
        "required": true,
        "schema": {
          "type": "string"
        }
      }
    }
  }
}
