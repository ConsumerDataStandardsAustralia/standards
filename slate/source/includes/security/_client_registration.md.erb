## Client Registration

### Dynamic Client Registration
Data Recipients register with Data Holders according to **[[DCR]](#nref-DCR)** to obtain client credentials used to retrieve consumer data on behalf of a consumer.

#### Software Statement Assertion (SSA)

```diff
Updated encoded and decoded example SSAs to include energy scopes and minor updates for clarity and consistency
```

As per **[[DCR]](#nref-DCR)**, a Software Statement is defined in as: _A digitally signed JSON Web Token (JWT) created in accordance with **[[JWT]](#nref-JWT)** that asserts metadata values about the client software_
> An SSA is a digitally signed JSON Web Token (JWT) created in accordance with **[[JWT]](#nref-JWT)** that asserts metadata values about the client software.

Such that:

* The CDR Register **MUST** issue Software Statements to **active** Data Recipients for **active** Software Products
* The CDR Register **MUST** issue distinct Software Statements for each `Software Product ID`
* Software Statements are issued with a **10 minute** expiry time
* As per **[[FAPI-1.0-Advanced]](#nref-FAPI-1-0-Advanced)**, SSAs are signed by the CDR Register using **PS256**
* CDR Register public keys are exposed on a dedicated JWKS URI endpoint
* The CDR Register [JWKS endpoint](#get-jwks) is an unauthenticated endpoint, using TLS
* Data Recipients **MUST** present a valid SSA when undertaking dynamic client registration
* Data Holders **MUST NOT** register Data Recipient software products unless they present a verified [Registration Request](#registration-request-using-jwt) with a verified [SSA](#ssa-definition)

Refer to the [Register APIs](#register-apis) section for the endpoint definitions that will be used to retrieve and validate SSAs.

#### SSA Definition


>
Example SSA:


```
eyJhbGciOiJQUzI1NiIsImtpZCI6ImI4ZmFjZjJmZjM5NDQ0Zjc4MWUwYmU1ZGI0YjE0ZjE2IiwidHlwIjoiSldUIn0.eyJpc3MiOiJjZHItcmVnaXN0ZXIiLCJpYXQiOjE1NzE4MDgxMTEsImV4cCI6MjE0NzQ4MzY0NiwianRpIjoiM2JjMjA1YTFlYmM5NDNmYmI2MjRiMTRmY2IyNDExOTYiLCJjbGllbnRfbmFtZSI6Ik1vY2sgU29mdHdhcmUiLCJjbGllbnRfZGVzY3JpcHRpb24iOiJBIG1vY2sgc29mdHdhcmUgcHJvZHVjdCIsImNsaWVudF91cmkiOiJodHRwczovL3d3dy5tb2NrY29tcGFueS5jb20uYXUiLCJsZWdhbF9lbnRpdHlfaWQiOiIzQjBCMEE3Qi0zRTdCLTRBMkMtOTQ5Ny1FMzU3QTcxRDA3QzciLCJsZWdhbF9lbnRpdHlfbmFtZSI6Ik1vY2sgQ29tcGFueSBQdHkgTHRkLiIsIm9yZ19pZCI6IjNCMEIwQTdCLTNFN0ItNEEyQy05NDk3LUUzNTdBNzFEMDdDOCIsIm9yZ19uYW1lIjoiTW9jayBDb21wYW55IEJyYW5kIiwicmVkaXJlY3RfdXJpcyI6WyJodHRwczovL3d3dy5tb2NrY29tcGFueS5jb20uYXUvcmVkaXJlY3RzL3JlZGlyZWN0MSIsImh0dHBzOi8vd3d3Lm1vY2tjb21wYW55LmNvbS5hdS9yZWRpcmVjdHMvcmVkaXJlY3QyIl0sInNlY3Rvcl9pZGVudGlmaWVyX3VyaSI6Imh0dHBzOi8vd3d3Lm1vY2tjb21wYW55LmNvbS5hdS9zZWN0b3JfaWRlbnRpZmllci5qc29uIiwibG9nb191cmkiOiJodHRwczovL3d3dy5tb2NrY29tcGFueS5jb20uYXUvbG9nb3MvbG9nbzEucG5nIiwidG9zX3VyaSI6Imh0dHBzOi8vd3d3Lm1vY2tjb21wYW55LmNvbS5hdS90b3MuaHRtbCIsInBvbGljeV91cmkiOiJodHRwczovL3d3dy5tb2NrY29tcGFueS5jb20uYXUvcG9saWN5Lmh0bWwiLCJqd2tzX3VyaSI6Imh0dHBzOi8vd3d3Lm1vY2tjb21wYW55LmNvbS5hdS9qd2tzIiwicmV2b2NhdGlvbl91cmkiOiJodHRwczovL3d3dy5tb2NrY29tcGFueS5jb20uYXUvcmV2b2NhdGlvbiIsInJlY2lwaWVudF9iYXNlX3VyaSI6Imh0dHBzOi8vd3d3Lm1vY2tjb21wYW55LmNvbS5hdSIsInNvZnR3YXJlX2lkIjoiNzQwQzM2OEYtRUNGOS00RDI5LUEyRUEtMDUxNEE2NkIwQ0RFIiwic29mdHdhcmVfcm9sZXMiOiJkYXRhLXJlY2lwaWVudC1zb2Z0d2FyZS1wcm9kdWN0Iiwic2NvcGUiOiJvcGVuaWQgcHJvZmlsZSBiYW5rOmFjY291bnRzLmJhc2ljOnJlYWQgYmFuazphY2NvdW50cy5kZXRhaWw6cmVhZCBiYW5rOnRyYW5zYWN0aW9uczpyZWFkIGJhbms6cGF5ZWVzOnJlYWQgYmFuazpyZWd1bGFyX3BheW1lbnRzOnJlYWQgZW5lcmd5OmVsZWN0cmljaXR5LnNlcnZpY2Vwb2ludHMuYmFzaWM6cmVhZCBlbmVyZ3k6ZWxlY3RyaWNpdHkuc2VydmljZXBvaW50cy5kZXRhaWw6cmVhZCBlbmVyZ3k6ZWxlY3RyaWNpdHkudXNhZ2U6cmVhZCBlbmVyZ3k6ZWxlY3RyaWNpdHkuZGVyOnJlYWQgZW5lcmd5OmFjY291bnRzLmJhc2ljOnJlYWQgZW5lcmd5OmFjY291bnRzLmRldGFpbDpyZWFkIGVuZXJneTphY2NvdW50cy5wYXltZW50c2NoZWR1bGU6cmVhZCBlbmVyZ3k6YWNjb3VudHMuY29uY2Vzc2lvbnM6cmVhZCBlbmVyZ3k6YmlsbGluZzpyZWFkIGNvbW1vbjpjdXN0b21lci5iYXNpYzpyZWFkIGNvbW1vbjpjdXN0b21lci5kZXRhaWw6cmVhZCBjZHI6cmVnaXN0cmF0aW9uIn0.XTSst96xOifAnaMaBj0I5nO5vbtNwvz304hJ9I_jPOcdD6vitmLiyWdkdW5GKA4JAa62_DmRIU_3zXQL0gSSJxoWhCSbuIlfwDtXFpFZzQAnTv-hOul-5clYmXvQqqEqWvbZZ4g7IKdWdROp4fzWFXB0VKf-_qzue_Kksy3A9CwdZRmNMDFtIApkSULqxK3S8D2nFa3lvGzegl76Ji7p0Zjkyu8YexFyKCahTEGzQrRQeVILpaN107XHNlSWlhsv4hr1PXwG2Pn1z54SCG9tVOZ10WaqZ5SMjRqsQN-lVYSVe5BCTpQ-N_GnYuUeWh0rOJ9CrA8CUN_twCJXyW3I5w
```


>
Associated JWKS:

```
{
  "keys": [
    {
      "kid": "b8facf2ff39444f781e0be5db4b14f16",
      "kty": "RSA",
      "key_ops": [
        "sign",
        "verify"
      ],
      "n": "s0zGoaOEJE8HDfHjWtO0xLXtuPcwio8BEoj0-uu9kxxDIF7jH0jb06EwoPkb83BET59x6C0TtRfc_I5ZDksQKRClWXzbazqi62M5YhCgwyB-S09PJb8P1GfQBYyK346nLKARHbFJ1t1SHARcVFJA_8NeHfQn_0fyEc55R3GGNDL3YQtjEoTb-LMR-KpcPB2BpyDuie-jk-3f1t0EfvnkVp-6co1_KTXrbwuYtH31YBZLgU4JeZEJLTnGdMKmJppZ9SnyrBB461hMmw0HJHJj6uZJSiP2onmvlrUezv1T3NM3HOE7WHxlps9MUJj3vcpea-O6n5JBX8emTduLuLuKuw",
      "e": "AQAB"
    }
  ]
}
```

>
Decoded SSA

```
{
  "alg": "PS256",
  "kid": "b8facf2ff39444f781e0be5db4b14f16",
  "typ": "JWT"
}

{
  "iss": "cdr-register",
  "iat": 1571808111,
  "exp": 2147483646,
  "jti": "3bc205a1ebc943fbb624b14fcb241196",
  "client_name": "Mock Software",
  "client_description": "A mock software product",
  "client_uri": "https://www.mockcompany.com.au",
  "legal_entity_id": "3B0B0A7B-3E7B-4A2C-9497-E357A71D07C7",
  "legal_entity_name": "Mock Company Pty Ltd.",
  "org_id": "3B0B0A7B-3E7B-4A2C-9497-E357A71D07C8",
  "org_name": "Mock Company Brand",
  "redirect_uris": [
    "https://www.mockcompany.com.au/redirects/redirect1",
    "https://www.mockcompany.com.au/redirects/redirect2"
  ],
  "sector_identifier_uri": "https://www.mockcompany.com.au/sector_identifier.json",
  "logo_uri": "https://www.mockcompany.com.au/logos/logo1.png",
  "tos_uri": "https://www.mockcompany.com.au/tos.html",
  "policy_uri": "https://www.mockcompany.com.au/policy.html",
  "jwks_uri": "https://www.mockcompany.com.au/jwks",
  "revocation_uri": "https://www.mockcompany.com.au/revocation",
  "recipient_base_uri": "https://www.mockcompany.com.au",
  "software_id": "740C368F-ECF9-4D29-A2EA-0514A66B0CDE",
  "software_roles": "data-recipient-software-product",
  "scope": "openid profile bank:accounts.basic:read bank:accounts.detail:read bank:transactions:read bank:payees:read bank:regular_payments:read energy:electricity.servicepoints.basic:read energy:electricity.servicepoints.detail:read energy:electricity.usage:read energy:electricity.der:read energy:accounts.basic:read energy:accounts.detail:read energy:accounts.paymentschedule:read energy:accounts.concessions:read energy:billing:read common:customer.basic:read common:customer.detail:read cdr:registration"
}

```

The SSA will conform to the requirements of **[[DCR]](#nref-DCR)** with the following clarifications:



| Client Metadata | Required | Modifiable | Description
|--------------|-------|-------|----------------------------------------------------------------------------------------
|**iss**|	Required | | Contains the `iss` (issuer) claim denoting the party attesting to the claims in the software statement</br>**value: "cdr-register"**
|**iat**|	Required | | The time at which the request was issued by the CDR Register, expressed as seconds since 1970-01-01T00:00:00Z as measured in UTC
|**exp**|	Required | | The time at which the SSA expires expressed as seconds since 1970-01-01T00:00:00Z as measured in UTC
|**jti**|	Required | | Unique identifier for the JWT, used to prevent reuse of the SSA.
|**legal_entity_id**|	Optional | | A unique identifier string assigned by the CDR Register that identifies the Accredited Data Recipient Legal Entity
|**legal_entity_name**|	Optional | | Human-readable string name of the Accredited Data Recipient Legal Entity
|**org_id**|	Required | | A unique identifier string assigned by the CDR Register that identifies the Accredited Data Recipient Brand
|**org_name**|	Required | <i class="icon-check"></i> | Human-readable string name of the Accredited Data Recipient Brand to be presented to the end user during authorization
|**client_name**|	Required | <i class="icon-check"></i> | Human-readable string name of the software product to be presented to the end-user during authorization
|**client_description**|	Required | <i class="icon-check"></i> | Human-readable string name of the software product description to be presented to the end user during authorization
|**client_uri**|	Required | <i class="icon-check"></i> | URL string of a web page providing information about the client
|**redirect_uris**|	Required | <i class="icon-check"></i> | Array of redirection URI strings for use in redirect-based flows
|**sector_identifier_uri**| Optional | <i class="icon-check"></i>  | URL string referencing the client's sector identifier URI, used as an optional input to the Pairwise Identifier as described in described in [section 8](https://openid.net/specs/openid-connect-core-1_0.html#SubjectIDTypes) of **[[OIDC]](#nref-OIDC)**
|**logo_uri**|	Required | <i class="icon-check"></i> | URL string that references a logo for the client software product. The server **SHOULD** display this image to the end-user during approval
|**tos_uri**|	Optional | <i class="icon-check"></i> | URL string that points to a human-readable terms of service document for the Software Product
|**policy_uri**|	Optional | <i class="icon-check"></i> | URL string that points to a human-readable policy document for the Software Product
|**jwks_uri**|	Required | <i class="icon-check"></i> | URL string referencing the client's JSON Web Key (JWK) Set **[[RFC7517]](#nref-RFC7517)** document, which contains the client's public keys
|**revocation_uri**| Required | <i class="icon-check"></i>  | URI string that references the location of the Software Product consent revocation endpoint as per Consumer Data Standards [Endpoints](#security-endpoints)
|**recipient_base_uri**| Required | <i class="icon-check"></i>  | Base URI for the Consumer Data Standard Data Recipient endpoints. This **SHOULD** be the base to provide reference to all other [Data Recipient Endpoints](#security-endpoints)
|**software_id**|	Required | | String representing a unique identifier assigned by the Register and used by registration endpoints to identify the software product to be dynamically registered. </br></br>The `software_id` will remain the same across multiple updates or versions of the same piece of software.</br>The `software_id` **SHOULD** be used as the primary external identifier for the client to prevent duplicate client registrations
|**software_roles**| Required | | String containing a role of the software in the CDR Regime. Initially the only value used with be **“data-recipient-software-product”**
|**scope**|	Required | <i class="icon-check"></i> | String containing a space-separated list of scope values that the client can use when requesting access tokens. </br>These CDS scope values are defined at: [Authorisation Scopes](#authorisation-scopes)</br>The DCR scope value is defined at: [Client Registration Management](#registration-management)</br></br>As per the [CDS Scopes and Claims](#scopes-and-claims), **openid** and **profile** are included in the SSA

Get Software Statement Assertion API [v1](includes/obsolete/get-software-statement-assertion-v1.html) & [v2](includes/obsolete/get-software-statement-assertion-v2.html) has the scope claim explicitly defined.




### Registration Request using JWT

> Example Request
> Client registration with OpenID Hybrid Flow

```
HTTP/1.1 POST /register
Content-Type: application/jwt
Accept: application/json

### Non-normative Decoded JWT
{
   "alg":"PS256",
   "typ":"JWT",
   "kid":"12456"
}
{
  "iss": "CDR Software Product ID",
  "iat": 1571908322,
  "exp": 2148483456,
  "jti": "37747cd1c10545699f754adf28b73e31",
  "aud": "https://secure.api.dataholder.com/issuer",
  "redirect_uris": [
    "https://www.mockcompany.com.au/redirects/redirect1",
    "https://www.mockcompany.com.au/redirects/redirect2"
  ],
  "token_endpoint_auth_method": "private_key_jwt",
  "token_endpoint_auth_signing_alg": "PS256",
  "grant_types": [
    "client_credentials",
    "authorization_code",
    "refresh_token"
  ],
  "response_types": [
    "code id_token"
  ],
  "application_type": "web",
  "id_token_signed_response_alg": "PS256",
  "id_token_encrypted_response_alg": "RSA-OAEP",
  "id_token_encrypted_response_enc": "A256GCM",
  "request_object_signing_alg": "PS256",
  "software_statement": "string"
}
{
  "signature":...
}
```
> Example Request
> This example creates a FAPI 1.0 Phase 3 client registration that uses Authorization Code Flow with JARM encryption

```
HTTP/1.1 POST /register
Content-Type: application/jwt
Accept: application/json

### Non-normative Decoded JWT
{
   "alg":"PS256",
   "typ":"JWT",
   "kid":"12456"
}
{
  "iss": "CDR Software Product ID",
  "iat": 1571908322,
  "exp": 2148483456,
  "jti": "37747cd1c10545699f754adf28b73e31",
  "aud": "https://secure.api.dataholder.com/issuer",
  "redirect_uris": [
    "https://www.mockcompany.com.au/redirects/redirect1",
    "https://www.mockcompany.com.au/redirects/redirect2"
  ],
  "token_endpoint_auth_method": "private_key_jwt",
  "token_endpoint_auth_signing_alg": "PS256",
  "grant_types": [
    "client_credentials",
    "authorization_code",
    "refresh_token"
  ],
  "response_types": [
    "code"
  ],
  "application_type": "web",
  "id_token_signed_response_alg": "PS256",
  "authorization_signed_response_alg": "PS256",
  "authorization_encrypted_response_alg": "RSA-OAEP",
  "authorization_encrypted_response_enc": "A128CBC-HS256",
  "request_object_signing_alg": "PS256",
  "software_statement": "string"
}{
  "signature":...
}
```

To register with a Data Holder, the Data Recipient sends an HTTP POST to the Data Holder registration endpoint.

* The request **MUST** be presented in the format of a **[[RFC7519]](#nref-RFC7519)** compliant JWT.
* The request **MUST** use the HTTP POST method, using the `application/jwt` content type.
* The JWT **MUST** be signed using algorithms specified in [section 8.6](https://openid.net/specs/openid-financial-api-part-2.html#jws-algorithm-considerations) of **[[FAPI-1.0-Advanced]](#nref-FAPI-1-0-Advanced)**

The client registration request **MUST** contain the following claims in the JWT payload unless designated as Optional:


| Claim | Required | Description
|--------------|-------|-----------------------------------------------------------------------------------------------
|**iss**|	Required | Contains the identifier for the Data Recipient Software Product (SoftwareProductId) as defined in the CDR Register
|**iat**|	Required | The time at which the request was issued by the Data Recipient  expressed as seconds since 1970-01-01T00:00:00Z as measured in UTC
|**exp**|	Required | The time at which the request expires expressed as seconds since 1970-01-01T00:00:00Z as measured in UTC
|**jti**|	Required | Unique identifier for the JWT, used to prevent reuse of the token.
|**aud**|	Required | Contains the DH issuer value as described in the [OIDC Discovery Document](#security-endpoints)
|**redirect_uris**|	Optional | Array of redirection URI strings for use in redirect-based flows. If used, redirect_uris **MUST** match or be a subset of the redirect_uris as defined in the SSA
|**token_endpoint_auth_method**| Required | The requested authentication method for the token endpoint. The only supported method will be **private_key_jwt**
|**token_endpoint_auth_signing_alg**| Required | The algorithm used for signing the JWT
|**grant_types**|	Required | Array of OAuth 2.0 grant type strings that the client can use at the token endpoint. Supported values: **[client_credentials, authorization_code, refresh_token]**
|**response_types**|	Required | Array of the OAuth 2.0 response type strings that the client can use at the authorization endpoint. **values: ["code", "code id_token"]**<br><br>Response type value “code” is required for Authorization Code Flow. Response type value “code id_token” is required for OIDC Hybrid Flow.
|**application_type**|	Optional | Kind of the application. The only supported application type will be **web**
|**id_token_signed_response_alg**| Required | Algorithm with which an id_token is to be signed</br></br>Supported values as constrained by **[[FAPI-1.0-Advanced]](#nref-FAPI-1-0-Advanced)**. Required for both Authorization Code Flow (`response_type` “code”) and OIDC Hybrid Flow (`response_type` “code id_token”).
|**id_token_encrypted_response_alg**| Conditional | JWE `alg` algorithm with which an id_token is to be encrypted.<br><br>Required if OIDC Hybrid Flow (response type `code id_token`) is registered.
|**id_token_encrypted_response_enc**| Conditional | JWE `enc` algorithm with which an id_token is to be encrypted.<br><br>Required if OIDC Hybrid Flow (response type `code id_token`) is registered.
|**authorization_signed_response_alg**| Conditional | The JWS alg algorithm required for signing authorization responses. If this is specified, the response will be signed using JWS and the configured algorithm. The algorithm “none” is not allowed.<br><br>Required if response_type of “code” is registered by the client.
|**authorization_encrypted_response_alg**|Conditional|The JWE alg algorithm required for encrypting authorization responses. If unspecified, the default is that no encryption is performed.<br><br>Required if “authorization_encrypted_response_enc” is included.
|**authorization_encrypted_response_enc**|Optional|The JWE enc algorithm required for encrypting authorization responses. If “authorization_encrypted_response_alg” is specified, the default for this value is “A128CBC-HS256”.
|**request_object_signing_alg**| Optional | Algorithm which the ADR expects to sign the request object if a request object will be part of the authorization request sent to the Data Holder</br></br>If field not present in the request, data holders are expected to respond with an appropriate default value</br></br>Supported values as constrained by **[[FAPI-1.0-Advanced]](#nref-FAPI-1-0-Advanced)**
|**software_statement**|	Required | Software statement assertion issued by the CDR Register

#### ID Token Algorithm Selection Considerations

When requiring ID Token encryption, the following requirements are applicable.

Participants **MUST** support, at a minimum, the following ID Token algorithms:

| Claim | Values |
|--------------|---------
|**id_token_encrypted_response_alg**|	RSA-OAEP</br>RSA-OAEP-256
|**id_token_encrypted_response_enc**|	A256GCM</br>A128CBC-HS256

Data Holders **MUST** support at a minimum, 1 algorithm for each claim.

Data Recipients **MUST** support all the algorithms used in the ecosystem to ensure they can communicate with all Data Holders.

ID Token algorithm considerations remain relevant where the OIDC Hybrid Flow is leveraged as defined in the Consumer Data Standards and in accordance with sections [5.1.1](https://openid.net/specs/openid-financial-api-part-2-1_0.html#id-token-as-detached-signature), [5.2.2.1](https://openid.net/specs/openid-financial-api-part-2-1_0.html#id-token-as-detached-signature-1), and [5.2.3.1](https://openid.net/specs/openid-financial-api-part-2-1_0.html#id-token-as-detached-signature-2) of **[[FAPI-1.0-Advanced]](#nref-FAPI-1-0-Advanced)**.

#### JARM Response Encryption Considerations

If Data Holders support authorisation response encryption, they **MUST** support, at a minimum, one of each of the following `alg` and `enc` algorithms:

| Claim | Values
|-- | --
| **authorization_encryption_alg_values_supported** | RSA-OAEP<br/>RSA-OAEP-256
| **authorization_encryption_enc_values_supported** | A256GCM <br/>A128CBC-HS256

Data Recipients **MUST** support the minimum required algorithms.


### Registration Validation

Validation and use of the JWT and the claims described above **MUST** be performed in accordance with **[[JWT]](#nref-JWT)**.

SSA JWT signatures **MUST** be verified against the associated JWK published at the CDR Register [JWKS endpoint](#get-jwks).

The registration request JWT **MUST** be verified against the associated JWK published by the Data Recipient. Data Holders are required to verify the request JWT signature against an associated JWK from the `jwks_uri` extracted from the SSA.

Data Holders **MUST NOT** allow multiple active registrations for the same `software_id`.

**From 31st August 2022**, Data Holders **MUST** ignore unsupported authorisation scopes presented in the SSA for the creation and update of client registrations.

Data Holders **MUST** adhere to the [NFR performance requirements](#performance-requirements) when validating and responding to registration requests. Additional validation processes (such as outbound white-listing of data recipient endpoints) **MUST NOT** prevent specified response times being met.

### Registration Response

>
Example Created Response
OIDC Hybrid Flow

```
HTTP/1.1 201 Created
Content-Type: application/json

{
  "client_id": "2cfefa98-7d4a-4bcb-95da-47063b84d410",
  "client_id_issued_at": 1574398833,
  "client_name": "Mock Software",
  "client_description": "A mock software product",
  "client_uri": "https://www.mockcompany.com.au",
  "legal_entity_id": "3B0B0A7B-3E7B-4A2C-9497-E357A71D07C7",
  "legal_entity_name": "Mock Company Pty Ltd.",
  "org_id": "3B0B0A7B-3E7B-4A2C-9497-E357A71D07C8",
  "org_name": "Mock Company Brand",
  "redirect_uris": [
    "https://www.mockcompany.com.au/redirects/redirect1",
    "https://www.mockcompany.com.au/redirects/redirect2"
  ],
  "sector_identifier_uri": "https://www.mockcompany.com.au/sector_identifier.json",
  "logo_uri": "https://www.mockcompany.com.au/logos/logo1.png",
  "tos_uri": "https://www.mockcompany.com.au/tos.html",
  "policy_uri": "https://www.mockcompany.com.au/policy.html",
  "jwks_uri": "https://www.mockcompany.com.au/jwks",
  "revocation_uri": "https://www.mockcompany.com.au/revocation",
  "recipient_base_uri": "https://www.mockcompany.com.au",
  "token_endpoint_auth_method": "private_key_jwt",
  "token_endpoint_auth_signing_alg": "PS256",
  "grant_types": [
    "client_credentials",
    "authorization_code",
    "refresh_token"
  ],
  "response_types": [
    "code id_token"
  ],
  "application_type": "web",
  "id_token_signed_response_alg": "PS256",
  "id_token_encrypted_response_alg": "RSA-OAEP",
  "id_token_encrypted_response_enc": "A256GCM",
  "request_object_signing_alg": "PS256",
  "software_statement": "string",
  "software_id": "740C368F-ECF9-4D29-A2EA-0514A66B0CDE",
  "software_roles": "data-recipient-software-product",
  "scope": "openid profile bank:accounts.basic:read bank:accounts.detail:read bank:transactions:read bank:payees:read bank:regular_payments:read common:customer.basic:read common:customer.detail:read cdr:registration"
}
```

>
Example Created Response
Authorization Code Flow
This example creates a FAPI 1.0 Phase 3 client registration that uses Authorization Code Flow with JARM encryption

```
HTTP/1.1 201 Created
Content-Type: application/json

{
  "client_id": "2cfefa98-7d4a-4bcb-95da-47063b84d410",
  "client_id_issued_at": 1574398833,
  "client_name": "Mock Software",
  "client_description": "A mock software product",
  "client_uri": "https://www.mockcompany.com.au",
  "legal_entity_id": "3B0B0A7B-3E7B-4A2C-9497-E357A71D07C7",
  "legal_entity_name": "Mock Company Pty Ltd.",
  "org_id": "3B0B0A7B-3E7B-4A2C-9497-E357A71D07C8",
  "org_name": "Mock Company Brand",
  "redirect_uris": [
    "https://www.mockcompany.com.au/redirects/redirect1",
    "https://www.mockcompany.com.au/redirects/redirect2"
  ],
  "sector_identifier_uri": "https://www.mockcompany.com.au/sector_identifier.json",
  "logo_uri": "https://www.mockcompany.com.au/logos/logo1.png",
  "tos_uri": "https://www.mockcompany.com.au/tos.html",
  "policy_uri": "https://www.mockcompany.com.au/policy.html",
  "jwks_uri": "https://www.mockcompany.com.au/jwks",
  "revocation_uri": "https://www.mockcompany.com.au/revocation",
  "recipient_base_uri": "https://www.mockcompany.com.au",
  "token_endpoint_auth_method": "private_key_jwt",
  "token_endpoint_auth_signing_alg": "PS256",
  "grant_types": [
    "client_credentials",
    "authorization_code",
    "refresh_token"
  ],
  "response_types": [
    "code"
  ],
  "application_type": "web",
  "id_token_signed_response_alg": "PS256",
  "authorization_signed_response_alg": "PS256",
  "authorization_encrypted_response_alg": "RSA-OAEP",
  "authorization_encrypted_response_enc": "A128CBC-HS256",
  "request_object_signing_alg": "PS256",
  "software_statement": "string",
  "software_id": "740C368F-ECF9-4D29-A2EA-0514A66B0CDE",
  "software_roles": "data-recipient-software-product",
  "scope": "openid profile bank:accounts.basic:read bank:accounts.detail:read bank:transactions:read bank:payees:read bank:regular_payments:read common:customer.basic:read common:customer.detail:read cdr:registration"
}
```

On successful registration, the response **MUST** be returned to the  Data Recipient conforming to [Section 3.2.1](https://tools.ietf.org/html/rfc7591#section-3.2.1) of **[[DCR]](#nref-DCR)**.

| Claim | Required | Description
|--------------|-------|-----------------------------------------------------------------------------------------------
|**client_id**|	Required | Contains the dynamically generated identifier for the Software Product issued by the Data Holder
|**client_id_issued_at**|	Optional | Time at which the client identifier was issued

As per [Section 3.2.1](https://tools.ietf.org/html/rfc7591#section-3.2.1) of **[[DCR]](#nref-DCR)**, additionally, the authorisation server **MUST** return all registered metadata about this client, including any fields provisioned by the authorisation server itself.

The Software Statement value **MUST** be returned unmodified. Client metadata elements used from the software statement **MUST** also be returned directly as top-level client metadata values in the registration response.

Any additional claims **MUST** be ignored and not returned on completion of the request.


### Registration Errors

>
Example Error Response

```HTTP
HTTP/1.1 400 Bad Request
Content-Type: application/json
```
```json
{
 "error": "invalid_software_statement",
 "error_description": "Duplicate registrations for a given software_id are not valid"
}
```

When an error condition occurs during a registration request, the response **MUST** be returned to the Accredited Data Recipient conforming to [Section 3.2.2](https://tools.ietf.org/html/rfc7591#section-3.2.2) of **[[DCR]](#nref-DCR)**.

Duplicate registrations are not permitted so attempts to create a registration which already exists **MUST** return an HTTP 400 error.

Registration error responses schemas are defined in the [DCR APIs](#dcr-apis) section.

For those Registration errors which do not map to [Section 3.2.2](https://tools.ietf.org/html/rfc7591#section-3.2.2) of **[[DCR]](#nref-DCR)**, [HTTP Response Codes](#http-response-codes) in the Consumer Data Standards **SHOULD** be used.


### Registration Management


> Non-Normative Example for access token retrieval to perform registration management

```
HTTP/1.1 POST /token
Content-Type: application/x-www-form-urlencoded

grant_type=client_credentials&
  scope=cdr%3Aregistration&
  client_assertion_type=urn%3Aietf%3Aparams%3Aoauth%3Aclient-assertion-type%3Ajwt-bearer&
  client_assertion=eyJhbGciOiJQUzI1NiIsInR5cCI6IkpXVCIsImtpZCI6IjEyNDU2In0.ey ...

### Decoded client assertion JWT
{
  "alg": "PS256",
  "typ": "JWT",
  "kid": "12456"
}
{
  "iss": "12345",
  "sub": "12345",
  "iat": 1516239022,
  "exp": 1516239322,
  "aud": "https://www.holder.com.au/token",
  "jti": "37747cd1-c105-4569-9f75-4adf28b73e31"
}

```


Data Holders **MUST** expose Client Registration Management endpoints as defined in the [DCR APIs](#dcr-apis)

| HTTP Verb |  | MTLS | HoK | Client Authentication
|--------------|-------|-------|-------|------|-----------------------------------------------------------------------------
|**POST /register**|	Required | <i class="icon-check"></i> |  | N/A
|**GET /register/{clientID}**|	Required | <i class="icon-check"></i> | <i class="icon-check"></i> | Client Credentials with cdr:registration scope
|**PUT /register/{clientID}**|	Required | <i class="icon-check"></i> | <i class="icon-check"></i> | Client Credentials with cdr:registration scope
|**DELETE /register/{clientID}**|	Optional | <i class="icon-check"></i> | <i class="icon-check"></i> | Client Credentials with cdr:registration scope

* Registration endpoints will be exposed in the OIDC Discovery Configuration Endpoint
* POST and PUT operations **MUST** accept the SSA payload.
* Fields data holders do not support are not persisted.
* Access tokens issued for consuming CDR Data **SHOULD NOT** be used for client registration maintenance and vice-versa


### PUT Operations
Registrations **MUST** only be updated via Registration PUT operations

PUT operations are to be used for one of two scenarios:

1. The client has updated their registration details on the CDR Register and updates this information to the data holder
2. A new version of the SSA has been released and the client updates this information to the data holder
